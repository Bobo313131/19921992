import logging
import re
import os
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
(
    START,
    CHOOSE_CATEGORY,
    GET_ITEM_NAME,
    GET_PHOTOS,
    GET_DESCRIPTION,
    GET_PRICE,
    GET_CITY,
    GET_DELIVERY,
    GET_PICKUP_ADDRESS,
    GET_CONTACTS,
    CONFIRM,
) = range(11)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN or not ADMIN_CHAT_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã TOKEN –∏–ª–∏ ADMIN_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ö—ç—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
_keyboards_cache = {}

def get_cached_markup(buttons):
    key = str(buttons)
    if key not in _keyboards_cache:
        _keyboards_cache[key] = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    return _keyboards_cache[key]

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def validate_phone(phone: str) -> bool:
    return bool(re.match(r'^\+?[\d\s\-\(\)]{7,15}$', phone))

def validate_price(price: str) -> bool:
    return price.isdigit() and int(price) > 0

def validate_text(text: str, min_len=2, max_len=200) -> bool:
    return min_len <= len(text.strip()) <= max_len

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_category_markup():
    return get_cached_markup([
        ["üîÆ –ü—Ä–µ–¥–º–µ—Ç—ã –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞", "üí∞ –ú–æ–Ω–µ—Ç—ã/–∫—É–ø—é—Ä—ã"],
        ["‚öîÔ∏è –ü—Ä–µ–¥–º–µ—Ç—ã –≤–æ–π–Ω—ã", "üñº –ò—Å–∫—É—Å—Å—Ç–≤–æ"],
        ["üçΩ –ü–æ—Å—É–¥–∞", "üì¶ –î—Ä—É–≥–æ–µ"]
    ])

def get_back_cancel_markup():
    return get_cached_markup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]])

def get_photos_markup():
    return get_cached_markup([["üì§ –î–∞–ª–µ–µ"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]])

def get_description_markup():
    return get_cached_markup([["‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]])

def get_delivery_markup():
    return get_cached_markup([
        ["üöó –°–∞–º–æ–≤—ã–≤–æ–∑", "üè™ –î–æ—Å—Ç–∞–≤–∫–∞"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]
    ])

def get_confirm_markup():
    return get_cached_markup([["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"], ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]])

def get_start_markup():
    return get_cached_markup([["/start"]])

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=get_start_markup()
        )
    except:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        context.user_data.clear()
        await update.message.reply_text(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_category_markup()
        )
        return CHOOSE_CATEGORY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        
        context.user_data['category'] = update.message.text
        await update.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=get_back_cancel_markup()
        )
        return GET_ITEM_NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_category: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_item_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
                reply_markup=get_category_markup()
            )
            return CHOOSE_CATEGORY
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        
        if not validate_text(update.message.text):
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_cancel_markup()
            )
            return GET_ITEM_NAME
        
        context.user_data['item_name'] = update.message.text
        context.user_data['user_name'] = f"{update.effective_user.full_name} (@{update.effective_user.username})" if update.effective_user.username else update.effective_user.full_name
        context.user_data['photos'] = []  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ
        await update.message.reply_text(
            "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (1-10 —Ñ–æ—Ç–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ üì§ –î–∞–ª–µ–µ",
            reply_markup=get_photos_markup()
        )
        return GET_PHOTOS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_item_name: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        if update.message.text:
            if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                context.user_data.pop('photos', None)
                await update.message.reply_text(
                    "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
                    reply_markup=get_back_cancel_markup()
                )
                return GET_ITEM_NAME
            elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                context.user_data.pop('photos', None)
                return await cancel(update, context)
            elif update.message.text == "üì§ –î–∞–ª–µ–µ":
                if len(context.user_data.get('photos', [])) < 1:
                    await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 —Ñ–æ—Ç–æ!")
                    return GET_PHOTOS
                
                await update.message.reply_text(
                    "üìù –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (–≥–æ–¥, –º–∞—Ç–µ—Ä–∏–∞–ª, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'",
                    reply_markup=get_description_markup()
                )
                return GET_DESCRIPTION
            return GET_PHOTOS

        if update.message.photo:
            if 'photos' not in context.user_data:
                context.user_data['photos'] = []
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –º–∞–ª–µ–Ω—å–∫—É—é) –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
            photo = update.message.photo[-1].file_id
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if photo not in context.user_data['photos']:
                context.user_data['photos'].append(photo)
                count = len(context.user_data['photos'])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                if count <= 10:
                    await update.message.reply_text(
                        f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ {count}/10. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üì§ –î–∞–ª–µ–µ",
                        reply_markup=get_photos_markup()
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ üì§ –î–∞–ª–µ–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                        reply_markup=get_photos_markup()
                    )
            
        return GET_PHOTOS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photos: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (1-10 —Ñ–æ—Ç–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ üì§ –î–∞–ª–µ–µ",
                reply_markup=get_photos_markup()
            )
            return GET_PHOTOS
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        elif update.message.text == "‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏":
            context.user_data['description'] = "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            await update.message.reply_text(
                "üíµ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0):",
                reply_markup=get_back_cancel_markup()
            )
            return GET_PRICE
        
        if not validate_text(update.message.text, min_len=2, max_len=500):
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_description_markup()
            )
            return GET_DESCRIPTION
            
        context.user_data['description'] = update.message.text
        await update.message.reply_text(
            "üíµ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0):",
            reply_markup=get_back_cancel_markup()
        )
        return GET_PRICE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_description: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üìù –û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (–≥–æ–¥, –º–∞—Ç–µ—Ä–∏–∞–ª, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'",
                reply_markup=get_description_markup()
            )
            return GET_DESCRIPTION
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        
        if not validate_price(update.message.text):
            await update.message.reply_text(
                "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–±–æ–ª—å—à–µ 0). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_cancel_markup()
            )
            return GET_PRICE
            
        context.user_data['price'] = update.message.text
        await update.message.reply_text(
            "üèô –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
            reply_markup=get_back_cancel_markup()
        )
        return GET_CITY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_price: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üíµ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0):",
                reply_markup=get_back_cancel_markup()
            )
            return GET_PRICE
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        
        if not validate_text(update.message.text, min_len=2, max_len=50):
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_cancel_markup()
            )
            return GET_CITY
            
        context.user_data['city'] = update.message.text
        await update.message.reply_text(
            "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_delivery_markup()
        )
        return GET_DELIVERY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_city: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_delivery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üèô –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
                reply_markup=get_back_cancel_markup()
            )
            return GET_CITY
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        
        if update.message.text not in ["üöó –°–∞–º–æ–≤—ã–≤–æ–∑", "üè™ –î–æ—Å—Ç–∞–≤–∫–∞"]:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=get_delivery_markup()
            )
            return GET_DELIVERY
            
        context.user_data['delivery'] = update.message.text
        if update.message.text == "üöó –°–∞–º–æ–≤—ã–≤–æ–∑":
            await update.message.reply_text(
                "üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:",
                reply_markup=get_back_cancel_markup()
            )
            return GET_PICKUP_ADDRESS
        else:
            await update.message.reply_text(
                "üìû –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (—Ñ–æ—Ä–º–∞—Ç: +7XXX...):",
                reply_markup=get_back_cancel_markup()
            )
            return GET_CONTACTS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delivery: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_pickup_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:",
                reply_markup=get_delivery_markup()
            )
            return GET_DELIVERY
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        
        if not validate_text(update.message.text, min_len=5, max_len=200):
            await update.message.reply_text(
                "‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_back_cancel_markup()
            )
            return GET_PICKUP_ADDRESS
            
        context.user_data['pickup_address'] = update.message.text
        await update.message.reply_text(
            "üìû –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (—Ñ–æ—Ä–º–∞—Ç: +7XXX...):",
            reply_markup=get_back_cancel_markup()
        )
        return GET_CONTACTS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_pickup_address: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def handle_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            if context.user_data.get('delivery') == "üöó –°–∞–º–æ–≤—ã–≤–æ–∑":
                await update.message.reply_text(
                    "üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:",
                    reply_markup=get_back_cancel_markup()
                )
                return GET_PICKUP_ADDRESS
            else:
                await update.message.reply_text(
                    "üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:",
                    reply_markup=get_delivery_markup()
                )
                return GET_DELIVERY
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)
        
        if not validate_phone(update.message.text):
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79161234567):",
                reply_markup=get_back_cancel_markup()
            )
            return GET_CONTACTS
            
        context.user_data['contacts'] = update.message.text
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary = [
            "üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:*\n\n",
            f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {context.user_data['user_name']}\n",
            f"üìå *–¢–æ–≤–∞—Ä:* {context.user_data['item_name']}\n",
            f"üì¶ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {context.user_data['category']}\n",
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data.get('description', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}\n",
            f"üí∞ *–¶–µ–Ω–∞:* {context.user_data['price']} —Ä—É–±.\n",
            f"üèô *–ì–æ—Ä–æ–¥:* {context.user_data['city']}\n",
            f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {context.user_data['delivery']}"
        ]
        
        if context.user_data.get('pickup_address'):
            summary.append(f"\nüè† *–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:* {context.user_data['pickup_address']}")
        
        summary.append(f"\nüìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {context.user_data['contacts']}\n\n")
        summary.append("–ù–∞–∂–º–∏—Ç–µ *‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É* –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
        await update.message.reply_text(
            ''.join(summary),
            reply_markup=get_confirm_markup(),
            parse_mode="Markdown"
        )
        return CONFIRM
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contacts: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def confirm_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏"""
    try:
        if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üìû –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:",
                reply_markup=get_back_cancel_markup()
            )
            return GET_CONTACTS
        elif update.message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            return await cancel(update, context)
        
        if update.message.text != "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                reply_markup=get_confirm_markup()
            )
            return CONFIRM
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = [
            'item_name', 'category', 'price', 
            'city', 'delivery', 'contacts'
        ]
        
        missing_fields = [field for field in required_fields if field not in context.user_data]
        if missing_fields:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_start_markup()
            )
            return ConversationHandler.END
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        message = [
            "üõé *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n",
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {context.user_data['user_name']}\n",
            f"üìå *–¢–æ–≤–∞—Ä:* {context.user_data['item_name']}\n",
            f"üì¶ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {context.user_data['category']}\n",
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data.get('description', '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}\n",
            f"üí∞ *–¶–µ–Ω–∞:* {context.user_data['price']} —Ä—É–±.\n",
            f"üèô *–ì–æ—Ä–æ–¥:* {context.user_data['city']}\n",
            f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {context.user_data['delivery']}"
        ]
        
        if context.user_data.get('pickup_address'):
            message.append(f"\nüè† *–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:* {context.user_data['pickup_address']}")
        
        message.append(f"\nüìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {context.user_data['contacts']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=''.join(message),
            parse_mode="Markdown"
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'photos' in context.user_data and context.user_data['photos']:
            media = [InputMediaPhoto(photo) for photo in context.user_data['photos'][:10]]
            await context.bot.send_media_group(
                chat_id=ADMIN_CHAT_ID,
                media=media
            )
        
        await update.message.reply_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.\n\n"
            "–î–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        context.user_data.clear()
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_application: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏"""
    try:
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "–î–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_start_markup()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        await error_handler(update, context)
        return ConversationHandler.END

def main():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        application = Application.builder() \
            .token(TOKEN) \
            .concurrent_updates(True) \
            .pool_timeout(20) \
            .get_updates_pool_timeout(20) \
            .build()
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                CHOOSE_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)],
                GET_ITEM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_item_name)],
                GET_PHOTOS: [MessageHandler(filters.PHOTO | filters.TEXT, handle_photos)],
                GET_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description)],
                GET_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price)],
                GET_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)],
                GET_DELIVERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delivery)],
                GET_PICKUP_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pickup_address)],
                GET_CONTACTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contacts)],
                CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_application)],
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                MessageHandler(filters.Regex('^(‚ùå –û—Ç–º–µ–Ω–∞|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel),
            ],
            allow_reentry=True,
            per_user=True,
            per_chat=True
        )
        
        application.add_handler(conv_handler)
        application.add_error_handler(error_handler)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã polling
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        application.run_polling(
            poll_interval=0.5,  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
            timeout=15,         # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            close_loop=False    # –ù–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ü–∏–∫–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        )
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        exit(1)

if __name__ == "__main__":
    main()